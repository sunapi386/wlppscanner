==22803== Memcheck, a memory error detector
==22803== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==22803== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==22803== Command: ./wlppscan.cpp.exe
==22803== 
==22803== Invalid write of size 4
==22803==    at 0x403274: initT() (wlppscan.cpp:351)
==22803==    by 0x4041A8: scan(std::string) (wlppscan.cpp:359)
==22803==    by 0x40475B: main (wlppscan.cpp:485)
==22803==  Address 0x61e160 is not stack'd, malloc'd or (recently) free'd
==22803== 
==22803== 
==22803== Process terminating with default action of signal 11 (SIGSEGV)
==22803==  Access not within mapped region at address 0x61E160
==22803==    at 0x403274: initT() (wlppscan.cpp:351)
==22803==    by 0x4041A8: scan(std::string) (wlppscan.cpp:359)
==22803==    by 0x40475B: main (wlppscan.cpp:485)
==22803==  If you believe this happened as a result of a stack
==22803==  overflow in your program's main thread (unlikely but
==22803==  possible), you can try to increase the size of the
==22803==  main thread stack using the --main-stacksize= flag.
==22803==  The main thread stack size used in this run was 8388608.
==22803== 
==22803== HEAP SUMMARY:
==22803==     in use at exit: 2,196 bytes in 58 blocks
==22803==   total heap usage: 220 allocs, 162 frees, 7,522 bytes allocated
==22803== 
==22803== LEAK SUMMARY:
==22803==    definitely lost: 0 bytes in 0 blocks
==22803==    indirectly lost: 0 bytes in 0 blocks
==22803==      possibly lost: 1,940 bytes in 57 blocks
==22803==    still reachable: 256 bytes in 1 blocks
==22803==         suppressed: 0 bytes in 0 blocks
==22803== Rerun with --leak-check=full to see details of leaked memory
==22803== 
==22803== For counts of detected and suppressed errors, rerun with: -v
==22803== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 2 from 2)
